generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  REPORTER
  EDITOR
  PUBLISHER
  ADMIN
}

enum Status {
  DRAFT
  IN_REVIEW
  CHANGES_REQUESTED
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum SubmissionStatus {
  NEW
  TRIAGED
  PROMOTED
  REJECTED
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  role         Role
  passwordHash String?
  articles     Article[] @relation("ArticleAuthor")
  edits        Article[] @relation("ArticleEditor")
  revisions    Revision[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Article {
  id           String    @id @default(uuid())
  slug         String    @unique
  title        String
  body         Json
  excerpt      String?
  status       Status    @default(DRAFT)
  section      String
  tags         String[]
  lang         String    @default("en")
  location     String?
  heroImageId  String?
  heroImageUrl String?
  author       User      @relation("ArticleAuthor", fields: [authorId], references: [id])
  authorId     String
  editor       User?     @relation("ArticleEditor", fields: [editorId], references: [id])
  editorId     String?
  publisherId  String?
  scheduledAt  DateTime?
  publishedAt  DateTime?
  revisions    Revision[]
  submission   CitizenSubmission? @relation(fields: [submissionId], references: [id])
  submissionId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Revision {
  id        String   @id @default(uuid())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  note      String?
  from      Status
  to        Status
  createdAt DateTime @default(now())
}

model CitizenSubmission {
  id           String           @id @default(uuid())
  title        String
  body         String
  location     String?
  contactEmail String?
  contactPhone String?
  media        String[]
  status       SubmissionStatus @default(NEW)
  article      Article? @relation(fields: [articleId], references: [id])
  articleId   String?
  rejectionReason String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Media {
  id        String   @id @default(uuid())
  key       String   @unique
  url       String
  mime      String
  size      Int
  createdAt DateTime @default(now())
}

model HomepageSlot {
  id        String   @id @default(uuid())
  slot      Int
  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?
  override  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slot])
}
